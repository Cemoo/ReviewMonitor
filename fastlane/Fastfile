# update_fastlane

default_platform :ios

ENV['DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS'] = '-t DAV'

platform :ios do

  desc "Runs all the tests"
  lane :test do
    scan
  end

  lane :profiles do
    match
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do |options|
    match(type: "appstore") # more information: https://codesigning.guide
    increment_build_number(
      xcodeproj: "ReviewMonitor.xcodeproj"
    )
    gym(scheme: 'ReviewMonitor') # Build your app - more options available
    pilot
    version_number = get_version_number(xcodeproj: 'ReviewMonitor.xcodeproj', target: "ReviewMonitor") # Get version number
    build_number = get_build_number(xcodeproj: 'ReviewMonitor.xcodeproj') # Get build number
  end

  lane :release do |options|
    verify_env_variables
    ensure_git_status_clean
    ensure_git_branch(branch: 'master')
    git_pull

    version_number = prompt(text: "Please enter the version number")
    increment_version_number(
      version_number: version_number
    )
    increment_build_number(
      xcodeproj: "ReviewMonitor.xcodeproj"
    )

    gym(scheme: 'ReviewMonitor')

    version_number = get_version_number(xcodeproj: 'ReviewMonitor.xcodeproj', target: "ReviewMonitor") # Get version number
    build_number = get_build_number(xcodeproj: 'ReviewMonitor.xcodeproj') # Get build number
    version = "#{version_number}(#{build_number})"
    stamp_changelog(section_identifier: "Version #{version_number}(#{build_number})")

    # Then push to git remote
    #
    git_commit(path: ".", message: "Version Bump")
    push_to_git_remote

    # Preparing GitHub Release
    #
    github_release = get_github_release(url: "RishabhTayal/ReviewMonitor", version: version)
    if (github_release || {}).fetch('body', '').length == 0
      changelog = read_changelog

      title = prompt(text: 'Title: ')
      description = changelog

      github_release = set_github_release(
        repository_name: "RishabhTayal/ReviewMonitor",
        name: [version, title].join(" "),
        tag_name: version,
        description: description,
        is_draft: false
        )

      release_url = github_release['html_url']

      message = [title, description, release_url].join("\n\n")

    end
  end

  desc "Ensure all the requirement environment variables are provided"
  desc "this way the deployment script will fail early (and often)"
  private_lane :verify_env_variables do
    ["GITHUB_API_TOKEN"].each do |variable|
      next if ENV[variable].to_s.length > 0
      UI.user_error!("Missing ENV variables #{variable}, make sure to provide one for fastlane to be successful")
    end
  end
end